
UART_Design.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000021a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000014  00800060  00800060  0000028e  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000599  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 37       	cpi	r26, 0x74	; 116
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 02 01 	call	0x204	; 0x204 <main>
  74:	0c 94 0b 01 	jmp	0x216	; 0x216 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <UART_init>:

#define BAUD_PRESCALE (((F_CPU/(UART_BAUDRATE* 8UL))) - 1)

/***************              Functions Definitions              ***************/
void UART_init(void)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA_REG = (1<<U2X);
  84:	eb e2       	ldi	r30, 0x2B	; 43
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	82 e0       	ldi	r24, 0x02	; 2
  8a:	80 83       	st	Z, r24
	UCSRB_REG = (1<<RXEN) | (1<<TXEN);
  8c:	ea e2       	ldi	r30, 0x2A	; 42
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	88 e1       	ldi	r24, 0x18	; 24
  92:	80 83       	st	Z, r24
	UCSRC_REG = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
  94:	e0 e4       	ldi	r30, 0x40	; 64
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	86 e8       	ldi	r24, 0x86	; 134
  9a:	80 83       	st	Z, r24
	/* First 8 bits from the UART BAUD RATE REGISTER inside UBRRL and last 4 bits in UBRRH*/
	UBRRH_REG = BAUD_PRESCALE>>8;
  9c:	e0 e4       	ldi	r30, 0x40	; 64
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	10 82       	st	Z, r1
	UBRRL_REG = BAUD_PRESCALE;
  a2:	e9 e2       	ldi	r30, 0x29	; 41
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	8c e0       	ldi	r24, 0x0C	; 12
  a8:	80 83       	st	Z, r24
}
  aa:	cf 91       	pop	r28
  ac:	df 91       	pop	r29
  ae:	08 95       	ret

000000b0 <UART_sendByte>:

void UART_sendByte(const uint8_t data)
{
  b0:	df 93       	push	r29
  b2:	cf 93       	push	r28
  b4:	0f 92       	push	r0
  b6:	cd b7       	in	r28, 0x3d	; 61
  b8:	de b7       	in	r29, 0x3e	; 62
  ba:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE Flag is set when the TX Buffer is ready to recieve new data to transmit */
	while(BIT_IS_CLEAR(UCSRA_REG,UDRE)){}
  bc:	eb e2       	ldi	r30, 0x2B	; 43
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	88 2f       	mov	r24, r24
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	80 72       	andi	r24, 0x20	; 32
  c8:	90 70       	andi	r25, 0x00	; 0
  ca:	00 97       	sbiw	r24, 0x00	; 0
  cc:	b9 f3       	breq	.-18     	; 0xbc <UART_sendByte+0xc>
	UDR_REG = data;
  ce:	ec e2       	ldi	r30, 0x2C	; 44
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	89 81       	ldd	r24, Y+1	; 0x01
  d4:	80 83       	st	Z, r24
}
  d6:	0f 90       	pop	r0
  d8:	cf 91       	pop	r28
  da:	df 91       	pop	r29
  dc:	08 95       	ret

000000de <UART_recieveByte>:

uint8_t UART_recieveByte(void)
{
  de:	df 93       	push	r29
  e0:	cf 93       	push	r28
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data */
	while(BIT_IS_CLEAR(UCSRA_REG,RXC)){}
  e6:	eb e2       	ldi	r30, 0x2B	; 43
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	88 23       	and	r24, r24
  ee:	dc f7       	brge	.-10     	; 0xe6 <UART_recieveByte+0x8>
	return UDR_REG;
  f0:	ec e2       	ldi	r30, 0x2C	; 44
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
}
  f6:	cf 91       	pop	r28
  f8:	df 91       	pop	r29
  fa:	08 95       	ret

000000fc <UART_sendString>:

void UART_sendString(const uint8_t *Str)
{
  fc:	df 93       	push	r29
  fe:	cf 93       	push	r28
 100:	00 d0       	rcall	.+0      	; 0x102 <UART_sendString+0x6>
 102:	0f 92       	push	r0
 104:	cd b7       	in	r28, 0x3d	; 61
 106:	de b7       	in	r29, 0x3e	; 62
 108:	9b 83       	std	Y+3, r25	; 0x03
 10a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
 10c:	19 82       	std	Y+1, r1	; 0x01
 10e:	0e c0       	rjmp	.+28     	; 0x12c <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
 110:	89 81       	ldd	r24, Y+1	; 0x01
 112:	28 2f       	mov	r18, r24
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	8a 81       	ldd	r24, Y+2	; 0x02
 118:	9b 81       	ldd	r25, Y+3	; 0x03
 11a:	fc 01       	movw	r30, r24
 11c:	e2 0f       	add	r30, r18
 11e:	f3 1f       	adc	r31, r19
 120:	80 81       	ld	r24, Z
 122:	0e 94 58 00 	call	0xb0	; 0xb0 <UART_sendByte>
		i++;
 126:	89 81       	ldd	r24, Y+1	; 0x01
 128:	8f 5f       	subi	r24, 0xFF	; 255
 12a:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8_t *Str)
{
	uint8_t i = 0;
	while(Str[i] != '\0')
 12c:	89 81       	ldd	r24, Y+1	; 0x01
 12e:	28 2f       	mov	r18, r24
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	8a 81       	ldd	r24, Y+2	; 0x02
 134:	9b 81       	ldd	r25, Y+3	; 0x03
 136:	fc 01       	movw	r30, r24
 138:	e2 0f       	add	r30, r18
 13a:	f3 1f       	adc	r31, r19
 13c:	80 81       	ld	r24, Z
 13e:	88 23       	and	r24, r24
 140:	39 f7       	brne	.-50     	; 0x110 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
 142:	0f 90       	pop	r0
 144:	0f 90       	pop	r0
 146:	0f 90       	pop	r0
 148:	cf 91       	pop	r28
 14a:	df 91       	pop	r29
 14c:	08 95       	ret

0000014e <UART_receiveString>:


void UART_receiveString(uint8_t *Str)
{
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	df 93       	push	r29
 154:	cf 93       	push	r28
 156:	00 d0       	rcall	.+0      	; 0x158 <UART_receiveString+0xa>
 158:	0f 92       	push	r0
 15a:	cd b7       	in	r28, 0x3d	; 61
 15c:	de b7       	in	r29, 0x3e	; 62
 15e:	9b 83       	std	Y+3, r25	; 0x03
 160:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
 162:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
 164:	89 81       	ldd	r24, Y+1	; 0x01
 166:	28 2f       	mov	r18, r24
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	8a 81       	ldd	r24, Y+2	; 0x02
 16c:	9b 81       	ldd	r25, Y+3	; 0x03
 16e:	8c 01       	movw	r16, r24
 170:	02 0f       	add	r16, r18
 172:	13 1f       	adc	r17, r19
 174:	0e 94 6f 00 	call	0xde	; 0xde <UART_recieveByte>
 178:	f8 01       	movw	r30, r16
 17a:	80 83       	st	Z, r24
 17c:	0f c0       	rjmp	.+30     	; 0x19c <UART_receiveString+0x4e>
	while(Str[i] != '\x0D')
	{
		i++;
 17e:	89 81       	ldd	r24, Y+1	; 0x01
 180:	8f 5f       	subi	r24, 0xFF	; 255
 182:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
 184:	89 81       	ldd	r24, Y+1	; 0x01
 186:	28 2f       	mov	r18, r24
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	8a 81       	ldd	r24, Y+2	; 0x02
 18c:	9b 81       	ldd	r25, Y+3	; 0x03
 18e:	8c 01       	movw	r16, r24
 190:	02 0f       	add	r16, r18
 192:	13 1f       	adc	r17, r19
 194:	0e 94 6f 00 	call	0xde	; 0xde <UART_recieveByte>
 198:	f8 01       	movw	r30, r16
 19a:	80 83       	st	Z, r24

void UART_receiveString(uint8_t *Str)
{
	uint8_t i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '\x0D')
 19c:	89 81       	ldd	r24, Y+1	; 0x01
 19e:	28 2f       	mov	r18, r24
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	8a 81       	ldd	r24, Y+2	; 0x02
 1a4:	9b 81       	ldd	r25, Y+3	; 0x03
 1a6:	fc 01       	movw	r30, r24
 1a8:	e2 0f       	add	r30, r18
 1aa:	f3 1f       	adc	r31, r19
 1ac:	80 81       	ld	r24, Z
 1ae:	8d 30       	cpi	r24, 0x0D	; 13
 1b0:	31 f7       	brne	.-52     	; 0x17e <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
 1b2:	89 81       	ldd	r24, Y+1	; 0x01
 1b4:	28 2f       	mov	r18, r24
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ba:	9b 81       	ldd	r25, Y+3	; 0x03
 1bc:	fc 01       	movw	r30, r24
 1be:	e2 0f       	add	r30, r18
 1c0:	f3 1f       	adc	r31, r19
 1c2:	10 82       	st	Z, r1
}
 1c4:	0f 90       	pop	r0
 1c6:	0f 90       	pop	r0
 1c8:	0f 90       	pop	r0
 1ca:	cf 91       	pop	r28
 1cc:	df 91       	pop	r29
 1ce:	1f 91       	pop	r17
 1d0:	0f 91       	pop	r16
 1d2:	08 95       	ret

000001d4 <System_Init>:
#include "app.h"

uint8_t data[20];

void System_Init()
{
 1d4:	df 93       	push	r29
 1d6:	cf 93       	push	r28
 1d8:	cd b7       	in	r28, 0x3d	; 61
 1da:	de b7       	in	r29, 0x3e	; 62
	UART_init();
 1dc:	0e 94 3e 00 	call	0x7c	; 0x7c <UART_init>
}
 1e0:	cf 91       	pop	r28
 1e2:	df 91       	pop	r29
 1e4:	08 95       	ret

000001e6 <System_Update>:

void System_Update()
{
 1e6:	df 93       	push	r29
 1e8:	cf 93       	push	r28
 1ea:	cd b7       	in	r28, 0x3d	; 61
 1ec:	de b7       	in	r29, 0x3e	; 62
	//Receive byte from terminal
	UART_receiveString(data);
 1ee:	80 e6       	ldi	r24, 0x60	; 96
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 a7 00 	call	0x14e	; 0x14e <UART_receiveString>
	//Sends Byte back to Terminal
	UART_sendString(data);
 1f6:	80 e6       	ldi	r24, 0x60	; 96
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 7e 00 	call	0xfc	; 0xfc <UART_sendString>
}
 1fe:	cf 91       	pop	r28
 200:	df 91       	pop	r29
 202:	08 95       	ret

00000204 <main>:
 */

#include "APP/app.h"

int main(void)
{
 204:	df 93       	push	r29
 206:	cf 93       	push	r28
 208:	cd b7       	in	r28, 0x3d	; 61
 20a:	de b7       	in	r29, 0x3e	; 62
	System_Init();
 20c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <System_Init>
	while(1)
	{
		System_Update();
 210:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <System_Update>
 214:	fd cf       	rjmp	.-6      	; 0x210 <main+0xc>

00000216 <_exit>:
 216:	f8 94       	cli

00000218 <__stop_program>:
 218:	ff cf       	rjmp	.-2      	; 0x218 <__stop_program>
